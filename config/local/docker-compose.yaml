services:
  traefik:
    image: traefik:v2.10.7
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/acme.json:/letsencrypt/acme.json"

  fastapi:
    build: ../..
    container_name: "fastapi_${APP_ENV}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`localhost`)"
      - "traefik.http.routers.fastapi.entrypoints=web"
    ports:
      - "8088:8000"
    volumes:
      - ../..:/app:cached
    env_file:
      - .env
    command: sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --loop uvloop"
    environment:
      - POSTGRES_HOST=db
      - SECURITY_S3_ENDPOINT_URL=http://minio:9000
      - SECURITY_REDIS_HOST=redis
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_started

  db:
    image: postgis/postgis:17-3.5
    container_name: "fastapi_db_pg_${APP_ENV}"
    restart: always
    volumes:
      - psql:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:latest
    container_name: "fastapi_redis_${APP_ENV}"
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  minio:
    image: minio/minio
    container_name: "fastapi_minio_${APP_ENV}"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${SECURITY_S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${SECURITY_S3_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        until mc alias set local http://minio:9000 ${SECURITY_S3_ACCESS_KEY} ${SECURITY_S3_SECRET_KEY}; do
          echo 'Waiting for MinIO...'
          sleep 3
        done &&
        mc mb --ignore-existing local/${SECURITY_S3_BUCKET_NAME}
      "

  celery-worker:
    build: ../..
    container_name: "fastapi_celery_worker_${APP_ENV}"
    command: celery -A app.tasks.app worker --loglevel=debug --concurrency=1
    restart: unless-stopped
    volumes:
      - ../..:/app:cached
      - ./logs/celery:/logs
    env_file:
      - ./.env
    environment:
      - C_FORCE_ROOT=1
      - POSTGRES_HOST=db
      - SECURITY_S3_ENDPOINT_URL=http://minio:9000
      - SECURITY_REDIS_HOST=redis
    depends_on:
      - redis
      - db
      - minio

volumes:

  psql:
    driver: local

  minio_data:
    driver: local